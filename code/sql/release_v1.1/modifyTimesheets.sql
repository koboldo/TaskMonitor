DROP TRIGGER IF EXISTS SET_TIMING_TIME_SHEET;
DROP TRIGGER IF EXISTS SET_TIMING2_TIME_SHEET;
DROP TRIGGER IF EXISTS CALC_USED_TIME_SHEET;
DROP TRIGGER IF EXISTS CALC_USED2_TIME_SHEET;

ALTER TABLE TIME_SHEET RENAME TO TIME_SHEET_OLD;
CREATE TABLE TIME_SHEET (
	PERSON_ID INTEGER NOT NULL,
	WORK_DATE INTEGER NOT NULL,
	USED_TIME INTEGER,
	FROM_DATE INTEGER,
	TO_DATE INTEGER,
	BREAK NUMBER DEFAULT 900,
	IS_LEAVE VARCHAR(1) DEFAULT 'N',
	CREATED INTEGER,
	LAST_MOD INTEGER,
	CREATED_BY INTEGER, 
	MODIFIED_BY INTEGER, 
	UNIQUE (WORK_DATE, PERSON_ID) ON CONFLICT IGNORE,
	FOREIGN KEY(PERSON_ID) REFERENCES PERSON(ID)
);

CREATE TRIGGER CALC_USED_TIME_SHEET AFTER INSERT ON TIME_SHEET
WHEN
	NEW.FROM_DATE IS NOT NULL AND NEW.TO_DATE IS NOT NULL AND NEW.BREAK IS NOT NULL
BEGIN
	UPDATE TIME_SHEET
	SET USED_TIME = NEW.TO_DATE - NEW.FROM_DATE - NEW.BREAK
	WHERE PERSON_ID = NEW.PERSON_ID AND WORK_DATE = NEW.WORK_DATE;
END;

CREATE TRIGGER CALC_USED2_TIME_SHEET AFTER UPDATE ON TIME_SHEET
WHEN
	COALESCE(OLD.FROM_DATE,0) <> NEW.FROM_DATE OR COALESCE(OLD.TO_DATE,0) <> NEW.TO_DATE OR OLD.BREAK <> NEW.BREAK 
BEGIN
	UPDATE TIME_SHEET
	SET USED_TIME = MAX(COALESCE(NEW.TO_DATE,OLD.TO_DATE,0) - COALESCE(NEW.FROM_DATE,OLD.FROM_DATE,0) - COALESCE(NEW.BREAK,OLD.BREAK,0),0)
	WHERE PERSON_ID = OLD.PERSON_ID AND WORK_DATE = OLD.WORK_DATE;
END;

CREATE TRIGGER SET_TIMING_TIME_SHEET AFTER INSERT ON TIME_SHEET
WHEN
	NEW.CREATED IS NULL
BEGIN
	UPDATE TIME_SHEET
	SET CREATED = STRFTIME('%s','NOW')
	WHERE PERSON_ID = NEW.PERSON_ID AND WORK_DATE = NEW.WORK_DATE;
END;

CREATE TRIGGER SET_TIMING2_TIME_SHEET AFTER UPDATE ON TIME_SHEET
WHEN
	COALESCE(OLD.FROM_DATE,0) <> NEW.FROM_DATE OR COALESCE(OLD.TO_DATE,0) <> NEW.TO_DATE OR OLD.BREAK <> NEW.BREAK 
BEGIN
	UPDATE TIME_SHEET
	SET LAST_MOD = STRFTIME('%s','NOW')
	WHERE PERSON_ID = NEW.PERSON_ID AND WORK_DATE = NEW.WORK_DATE;
END;


INSERT INTO TIME_SHEET (PERSON_ID,WORK_DATE,FROM_DATE,TO_DATE,BREAK)
SELECT PERSON_ID,WORK_DATE,FROM_DATE,TO_DATE,
CASE BREAK_IN_MINUTES WHEN 0 THEN 900 ELSE BREAK_IN_MINUTES*60+900 END
FROM TIME_SHEET_OLD

-- DROP TABLE TIME_SHEET_OLD;
